package vn.dinosys.dinoad.data.database.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Void> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "UserId", false, "USER_ID");
        public final static Property Username = new Property(1, String.class, "Username", false, "USERNAME");
        public final static Property AvatarUrl = new Property(2, String.class, "AvatarUrl", false, "AVATAR_URL");
        public final static Property DisplayName = new Property(3, String.class, "DisplayName", false, "DISPLAY_NAME");
        public final static Property Gender = new Property(4, String.class, "Gender", false, "GENDER");
        public final static Property Birthday = new Property(5, Long.class, "Birthday", false, "BIRTHDAY");
        public final static Property CountryCode = new Property(6, Short.class, "CountryCode", false, "COUNTRY_CODE");
        public final static Property PhoneNumber = new Property(7, String.class, "PhoneNumber", false, "PHONE_NUMBER");
        public final static Property Type = new Property(8, String.class, "Type", false, "TYPE");
        public final static Property Platform = new Property(9, String.class, "Platform", false, "PLATFORM");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"USER_ID\" INTEGER," + // 0: UserId
                "\"USERNAME\" TEXT," + // 1: Username
                "\"AVATAR_URL\" TEXT," + // 2: AvatarUrl
                "\"DISPLAY_NAME\" TEXT," + // 3: DisplayName
                "\"GENDER\" TEXT," + // 4: Gender
                "\"BIRTHDAY\" INTEGER," + // 5: Birthday
                "\"COUNTRY_CODE\" INTEGER," + // 6: CountryCode
                "\"PHONE_NUMBER\" TEXT," + // 7: PhoneNumber
                "\"TYPE\" TEXT," + // 8: Type
                "\"PLATFORM\" TEXT);"); // 9: Platform
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(1, UserId);
        }
 
        String Username = entity.getUsername();
        if (Username != null) {
            stmt.bindString(2, Username);
        }
 
        String AvatarUrl = entity.getAvatarUrl();
        if (AvatarUrl != null) {
            stmt.bindString(3, AvatarUrl);
        }
 
        String DisplayName = entity.getDisplayName();
        if (DisplayName != null) {
            stmt.bindString(4, DisplayName);
        }
 
        String Gender = entity.getGender();
        if (Gender != null) {
            stmt.bindString(5, Gender);
        }
 
        Long Birthday = entity.getBirthday();
        if (Birthday != null) {
            stmt.bindLong(6, Birthday);
        }
 
        Short CountryCode = entity.getCountryCode();
        if (CountryCode != null) {
            stmt.bindLong(7, CountryCode);
        }
 
        String PhoneNumber = entity.getPhoneNumber();
        if (PhoneNumber != null) {
            stmt.bindString(8, PhoneNumber);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(9, Type);
        }
 
        String Platform = entity.getPlatform();
        if (Platform != null) {
            stmt.bindString(10, Platform);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AvatarUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DisplayName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Gender
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // Birthday
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6), // CountryCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PhoneNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Platform
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatarUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisplayName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCountryCode(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6));
        entity.setPhoneNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlatform(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
